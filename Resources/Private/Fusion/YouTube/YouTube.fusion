prototype(Jonnitto.PrettyEmbedYoutube:YouTube) < prototype(Neos.Neos:ContentComponent) {
    contentElement = true

    configuration = ${Configuration.setting('Jonnitto.PrettyEmbedYoutube')}
    image = ${q(node).property('image')}
    maximumWidth = ${this.configuration.maximumWidth}
    videoID = ${q(node).property('videoID')}
    videoID.@process.getIDFromUrl = ${Jonnitto.PrettyEmbedYoutube.parseID(value)}

    type = Jonnitto.PrettyEmbedYoutube:GetProperty {
        property = 'type'
    }
    lightbox = Jonnitto.PrettyEmbedYoutube:GetProperty {
        property = 'lightbox'
    }
    allowFullScreen = Jonnitto.PrettyEmbedYoutube:GetProperty {
        property = 'allowFullScreen'
    }
    showinfo = Jonnitto.PrettyEmbedYoutube:GetProperty {
        property = 'showinfo'
    }
    showControls = Jonnitto.PrettyEmbedYoutube:GetProperty {
        property = 'showControls'
    }
    loop = Jonnitto.PrettyEmbedYoutube:GetProperty {
        property = 'loop'
    }
    closedCaptions = Jonnitto.PrettyEmbedYoutube:GetProperty {
        property = 'closedCaptions'
    }
    showRelated = Jonnitto.PrettyEmbedYoutube:GetProperty {
        property = 'showRelated'
    }

    // Internal
    isPlaylistAndNoImage = ${this.videoID && this.type == 'playlist' && !this.image}
    needNotification = ${!this.videoID || this.isPlaylistAndNoImage}

    renderer = Neos.Fusion:Tag {
        tagName = ${node.context.live ? 'a' : 'div'}
        attributes {
            class = Neos.Fusion:RawArray {
                nodeType = 'jonnitto-prettyembedyoutube'
                button = ${props.needNotification ? false : 'jonnitto-prettyembedyoutube__button'}
                lightbox = ${props.lightbox ? props.configuration.lightbox.class : props.configuration.embed.class}
            }
            data-fs = ${props.allowFullScreen ? 'true' : 'false'}
            data-embed = Neos.Fusion:Array {
                src            = ${props.configuration.embed[props.type]}
                videoID        = ${props.videoID}
                var            = ${props.type == 'video' ? '?' : '&'}
                autoplay       = 'autoplay=1'
                showinfo       = ${props.showInfo ? '' : '&showinfo=0'}
                showControls   = ${props.showControls ? '' : '&controls=0'}
                loop           = ${props.loop ? '&loop=1' : ''}
                closedCaptions = ${props.closedCaptions ? '&cc_load_policy=1' : ''}
                showRelated    = ${props.showRelated ? '&rel=1' : '&rel=0'}
            }
            href = ${props.configuration.lightbox[props.type] + props.videoID}
            target = '_blank'
        }
        content = afx`
            <Carbon.Image:Tag @key='custom' @if.render={props.image && !props.needNotification} asset={props.image} maximumWidth={props.maximumWidth} class='jonnitto-prettyembedyoutube__costum-preview' additionalClass={this.class} />
            <img @key='youtube' @if.render={!props.image && !props.needNotification} class='jonnitto-prettyembedyoutube__youtube-preview' src={'https://img.youtube.com/vi/' + props.videoID + '/' + props.configuration.imgResultion + '.jpg'} />
            <Jonnitto.PrettyEmbedYoutube:Notification @key='noVideoID' @if.render={!props.videoID} key='noVideoID' />
            <Jonnitto.PrettyEmbedYoutube:Notification @key='isPlaylistAndNoImage' @if.render={props.isPlaylistAndNoImage} key='isPlaylistAndNoImage' />
        `
        @process {
            wrapper = Neos.Fusion:Tag {
                @if.render = ${props.configuration.wrapper}
                attributes.class = ${Type.isString(props.configuration.wrapper) ? props.configuration.wrapper : false}
                content = ${value}
            }
        }
    }

    @context.contentElement = ${this.contentElement}
    @process.contentElementWrapping.@if.contentElementWrapping = ${contentElement}
}
