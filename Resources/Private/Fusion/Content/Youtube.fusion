prototype(Jonnitto.PrettyEmbedYoutube:Content.Youtube) < prototype(Jonnitto.PrettyEmbedHelper:Content) {
    package = 'Youtube'

    metadataID = ${q(node).property('metadataID')}
    videoID = ${q(node).property('videoID')}
    videoID.@process.getIDFromUrl = ${this.metadataID ? this.metadataID : Jonnitto.PrettyEmbedHelper.youtubeID(value)}

    alternativeText = ${q(node).property('metadataTitle')}
    imageFromYoutube = ${q(node).property('metadataImage')}
    thumbnailFromResources = ${q(node).property('metadataThumbnail')}
    ratio = ${q(node).property('metadataRatio')}
    maximumWidth = ${Configuration.setting('Jonnitto.PrettyEmbedHelper.maximumWidth')}
    async = true

    force16to9 = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'force16to9'
    }
    type = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'type'
    }
    allowFullScreen = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'allowFullScreen'
    }
    showinfo = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'showinfo'
    }
    closedCaptions = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'closedCaptions'
    }
    showRelated = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'showRelated'
    }

    enableGdprMessage = ${Configuration.setting('Jonnitto.PrettyEmbedHelper.enableGdprMessage')}
    gdprMessage = Jonnitto.PrettyEmbedHelper:GdprMessage

    renderer = Neos.Fusion:Component {
        @apply.props = ${props}
        poster = Neos.Fusion:Case {
            hasPersisantResource {
                condition = ${props.image || props.thumbnailFromResources}
                renderer = Neos.Neos:ImageUri {
                    asset = ${props.image || props.thumbnailFromResources}
                    async = ${props.async}
                    maximumWidth = ${props.maximumWidth}
                }
            }
            thumbnailFromYoutube {
                condition = ${props.videoID}
                renderer = ${props.imageFromYoutube}
            }
        }
        poster2x = Neos.Neos:ImageUri {
            @if {
                hasAsset = ${this.asset}
                hasEnoughPixel = ${this.asset.width >= props.maximumWidth * 2}
            }
            asset = ${props.image || props.thumbnailFromResources}
            async = ${props.async}
            maximumWidth = ${props.maximumWidth * 2}
        }
        renderer = Neos.Fusion:Case {
            noVideoID {
                condition = ${!props.videoID}
                renderer = Jonnitto.PrettyEmbedHelper:Notification {
                    key = 'noVideoID'
                    default = 'Please add a Youtube ID or url in the inspector'
                }
            }
            noPoster {
                condition = ${!props.poster && props.type == 'playlist'}
                renderer = Jonnitto.PrettyEmbedHelper:Notification {
                    key = 'needPreviewImage'
                    default = 'You need to define a custom preview image.'
                }
            }
            default {
                condition = true
                renderer = afx`<Jonnitto.PrettyEmbedYoutube:Component.Youtube {...props} live={node.context.live} />`
            }
        }
    }
}
